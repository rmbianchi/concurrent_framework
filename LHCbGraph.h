
// include c++
#include <vector>
// include fwk
#include "Algo.h"

#ifndef CF4Hep_LHCbGraph_h
#define CF4Hep_LHCbGraph_h

std::vector<AlgoBase*> lhcbChain(){
    std::vector<AlgoBase*> algos;
    AlgoBase* algo0 = new ToyAlgo("PatForward",0,0);
    algo0->reads("Raw_IT_LiteClusters");
    algo0->reads("Rec_Track_Velo");
    algo0->reads("Rec_Status");
    algo0->produces("Rec_Track_Forward");
    algos.push_back(algo0);
    AlgoBase* algo1 = new ToyAlgo("TrackDiMuonMonitor",0,0);
    algo1->reads("Rec_Track_Muon");
    algo1->produces("Rec_Vertex_DiMuon");
    algos.push_back(algo1);
    AlgoBase* algo2 = new ToyAlgo("TTTrackMonitor",0,0);
    algo2->reads("Rec_Track_Best");
    algo2->reads("Raw_TT_Clusters");
    algos.push_back(algo2);
    AlgoBase* algo3 = new ToyAlgo("ChargedProtoPAddVeloDEDX",0,0);
    algo3->reads("Rec_ProtoP_Charged");
    algos.push_back(algo3);
    AlgoBase* algo5 = new ToyAlgo("LumiFilterBeamCrossing",0,0);
    algo5->reads("Hlt_LumiSummary");
    algos.push_back(algo5);
    AlgoBase* algo6 = new ToyAlgo("MuonPIDMonitorDown",0,0);
    algo6->reads("Rec_Track_Best");
    algo6->reads("Rec_Muon_MuonPID");
    algo6->reads("Rec_Track_Muon");
    algos.push_back(algo6);
    AlgoBase* algo8 = new ToyAlgo("BrunelInit",0,0);
    algo8->produces("Rec_Header");
    algo8->produces("Rec_Status");
    algos.push_back(algo8);
    AlgoBase* algo10 = new ToyAlgo("ChargedProtoPMaker",0,0);
    algo10->reads("Rec_Track_Best");
    algo10->produces("Rec_ProtoP");
    algo10->produces("Rec_ProtoP_Charged");
    algos.push_back(algo10);
    AlgoBase* algo11 = new ToyAlgo("ChargedProtoPAddHcal",0,0);
    algo11->reads("Rec_Calo_InAccHcal");
    algo11->reads("Rec_Calo_HcalE");
    algo11->reads("Rec_Calo_HcalPIDe");
    algo11->reads("Rec_Calo_HcalPIDmu");
    algo11->reads("Rec_ProtoP_Charged");
    algos.push_back(algo11);
    AlgoBase* algo12 = new ToyAlgo("ElectronMatch",0,0);
    algo12->reads("Rec_Calo_InAccEcal");
    algo12->reads("Rec_Track_Best");
    algo12->reads("Rec_Calo_Electrons");
    algo12->produces("Rec_Calo_ElectronMatch");
    algos.push_back(algo12);
    AlgoBase* algo13 = new ToyAlgo("TrackMonitor",0,0);
    algo13->reads("Rec_Track_Best");
    algos.push_back(algo13);
    AlgoBase* algo14 = new ToyAlgo("TrackEcalMatchMonitor",0,0);
    algo14->reads("Rec_Calo_EcalClusters");
    algo14->reads("Rec_Track_Best");
    algos.push_back(algo14);
    AlgoBase* algo15 = new ToyAlgo("EcalZSup",0,0);
    algo15->reads("DAQ_Status");
    algo15->produces("Raw_Ecal_Digits");
    algos.push_back(algo15);
    AlgoBase* algo16 = new ToyAlgo("PrsL0Bit",0,0);
    algo16->reads("DAQ_Status");
    algo16->produces("Trig");
    algo16->produces("Trig_L0");
    algo16->produces("Trig_L0_PrsRaw");
    algos.push_back(algo16);
    AlgoBase* algo18 = new ToyAlgo("TTClusterMonitor",0,0);
    algo18->reads("Raw_TT_Clusters");
    algos.push_back(algo18);
    AlgoBase* algo20 = new ToyAlgo("PackMuonPIDs",0,0);
    algo20->reads("Rec_Muon_MuonPID");
    algo20->produces("pRec_Muon");
    algo20->produces("pRec_Muon_MuonPID");
    algos.push_back(algo20);
    AlgoBase* algo21 = new ToyAlgo("EcalADCs",0,0);
    algo21->reads("DAQ_Status");
    algo21->produces("Raw_Ecal");
    algo21->produces("Raw_Ecal_Adcs");
    algos.push_back(algo21);
    AlgoBase* algo22 = new ToyAlgo("ProtoParticlePIDClean",0,0);
    algo22->reads("Rec_ProtoP_Charged");
    algos.push_back(algo22);
    AlgoBase* algo24 = new ToyAlgo("RecSummary",0,0);
    algo24->reads("Rec_Track_Best");
    algo24->reads("Rec_Vertex_Primary");
    algo24->reads("Raw_Velo_Clusters");
    algo24->reads("Raw_TT_Clusters");
    algo24->reads("Raw_IT_Clusters");
    algo24->reads("Raw_Spd_Digits");
    algo24->reads("Rec_Track_Muon");
    algo24->reads("Raw_Muon_Coords");
    algo24->produces("Rec_Summary");
    algos.push_back(algo24);
    AlgoBase* algo25 = new ToyAlgo("TrackMatch",0,0);
    algo25->reads("Rec_Track_Velo");
    algo25->reads("Rec_Track_Seed");
    algo25->produces("Rec_Track_Match");
    algos.push_back(algo25);
    AlgoBase* algo27 = new ToyAlgo("RichDecodingErrors",0,0);
    algos.push_back(algo27);
    AlgoBase* algo28 = new ToyAlgo("MergedID",0,0);
    algo28->reads("Rec_Calo_MergedPi0s");
    algo28->produces("Rec_Calo_MergedID");
    algos.push_back(algo28);
    AlgoBase* algo30 = new ToyAlgo("InitSeedFit",0,0);
    algo30->reads("Rec_Track_Seed");
    algo30->reads("Raw_IT_LiteClusters");
    algos.push_back(algo30);
    AlgoBase* algo32 = new ToyAlgo("RiPIDMonLong10To70",0,0);
    algo32->reads("Rec_Rich_PIDs");
    algos.push_back(algo32);
    AlgoBase* algo33 = new ToyAlgo("MuMonitor",0,0);
    algo33->reads("Hlt_DecReports");
    algo33->reads("Rec_Track_Velo");
    algos.push_back(algo33);
    AlgoBase* algo34 = new ToyAlgo("EcalClust",0,0);
    algo34->reads("Raw_Ecal_Digits");
    algo34->produces("Rec_Calo");
    algo34->produces("Rec_Calo_EcalClusters");
    algos.push_back(algo34);
    AlgoBase* algo36 = new ToyAlgo("TrackPrepareVelo",0,0);
    algo36->reads("Rec_Track_Velo");
    algo36->reads("Rec_Track_Best");
    algo36->produces("Rec_Track_PreparedVelo");
    algos.push_back(algo36);
    AlgoBase* algo38 = new ToyAlgo("HcalFillRawBuffer",0,0);
    algo38->reads("Raw_Hcal_Adcs");
    algo38->reads("Trig_L0_HcalRaw");
    algos.push_back(algo38);
    AlgoBase* algo39 = new ToyAlgo("MuonIDAlg",0,0);
    algo39->reads("Raw_Muon_Coords");
    algo39->reads("Rec_Track_Best");
    algo39->produces("Rec_Muon");
    algo39->produces("Rec_Muon_MuonPID");
    algo39->produces("Rec_Track_Muon");
    algos.push_back(algo39);
    AlgoBase* algo40 = new ToyAlgo("HltRateMonitor",0,0);
    algo40->reads("Hlt_DecReports");
    algos.push_back(algo40);
    AlgoBase* algo44 = new ToyAlgo("HcalE",0,0);
    algo44->reads("Rec_Calo_InAccHcal");
    algo44->reads("Rec_Track_Best");
    algo44->reads("Raw_Hcal_Digits");
    algo44->produces("Rec_Calo_HcalE");
    algos.push_back(algo44);
    AlgoBase* algo45 = new ToyAlgo("HcalPIDmu",0,0);
    algo45->reads("Rec_Calo_HcalE");
    algo45->produces("Rec_Calo_HcalPIDmu");
    algos.push_back(algo45);
    AlgoBase* algo47 = new ToyAlgo("TrackToDST",0,0);
    algo47->reads("Rec_Track_Best");
    algos.push_back(algo47);
    AlgoBase* algo48 = new ToyAlgo("PackChargedProtos",0,0);
    algo48->reads("Rec_ProtoP_Charged");
    algo48->produces("pRec_ProtoP");
    algo48->produces("pRec_ProtoP_Charged");
    algos.push_back(algo48);
    AlgoBase* algo49 = new ToyAlgo("MergeOfflineRichPIDs",0,0);
    algo49->reads("Rec_Status");
    algo49->produces("Rec_Rich_PIDs");
    algos.push_back(algo49);
    AlgoBase* algo50 = new ToyAlgo("OTTrackMonitor",0,0);
    algo50->reads("Rec_Track_Best");
    algos.push_back(algo50);
    AlgoBase* algo51 = new ToyAlgo("PrsFromRaw",0,0);
    algo51->reads("DAQ_Status");
    algo51->produces("Raw_Prs_Digits");
    algos.push_back(algo51);
    AlgoBase* algo52 = new ToyAlgo("InitBestFit",0,0);
    algo52->reads("Rec_Track_AllBest");
    algo52->reads("Raw_IT_LiteClusters");
    algos.push_back(algo52);
    AlgoBase* algo54 = new ToyAlgo("RiPIDMonLong70To100",0,0);
    algo54->reads("Rec_Rich_PIDs");
    algos.push_back(algo54);
    AlgoBase* algo60 = new ToyAlgo("TrackV0Finder",0,0);
    algo60->reads("Rec_Vertex_Primary");
    algo60->produces("Rec_Vertex_V0");
    algos.push_back(algo60);
    AlgoBase* algo61 = new ToyAlgo("NeutralProtoPMaker",0,0);
    algo61->reads("Rec_Calo_Photons");
    algo61->reads("Raw_Prs_Digits");
    algo61->reads("Raw_Spd_Digits");
    algo61->reads("Rec_Calo_ElectronMatch");
    algo61->reads("Rec_Calo_BremMatch");
    algo61->reads("Rec_Calo_PhotonID");
    algo61->reads("Rec_Calo_PhotonFromMergedID");
    algo61->reads("Rec_Calo_MergedID");
    algo61->reads("Raw_Hcal_Digits");
    algo61->reads("Rec_Calo_ClusterMatch");
    algo61->reads("Rec_Calo_MergedPi0s");
    algo61->reads("Rec_Calo_SplitPhotons");
    algo61->produces("Rec_ProtoP_Neutrals");
    algos.push_back(algo61);
    AlgoBase* algo62 = new ToyAlgo("RichRawDataSize",0,0);
    algos.push_back(algo62);
    AlgoBase* algo63 = new ToyAlgo("HcalADCs",0,0);
    algo63->reads("DAQ_Status");
    algo63->produces("Raw_Hcal");
    algo63->produces("Raw_Hcal_Adcs");
    algos.push_back(algo63);
    AlgoBase* algo68 = new ToyAlgo("MuonRec",0,0);
    algo68->reads("DAQ_Status");
    algo68->produces("Raw_Muon");
    algo68->produces("Raw_Muon_Coords");
    algos.push_back(algo68);
    AlgoBase* algo70 = new ToyAlgo("InSPD",0,0);
    algo70->reads("Rec_Track_Best");
    algo70->produces("Rec_Calo_InAccSpd");
    algos.push_back(algo70);
    AlgoBase* algo71 = new ToyAlgo("PackPVWeights",0,0);
    algo71->reads("Rec_Vertex_Weights");
    algo71->produces("pRec_Vertex_Weights");
    algos.push_back(algo71);
    AlgoBase* algo74 = new ToyAlgo("ANNGPIDLongMuon",0,0);
    algo74->reads("Rec_ProtoP_Charged");
    algos.push_back(algo74);
    AlgoBase* algo75 = new ToyAlgo("ChargedProtoPCombDLLs",0,0);
    algo75->reads("Rec_ProtoP_Charged");
    algos.push_back(algo75);
    AlgoBase* algo76 = new ToyAlgo("ChargedProtoPAddEcal",0,0);
    algo76->reads("Rec_Calo_InAccEcal");
    algo76->reads("Rec_Calo_ElectronMatch");
    algo76->reads("Rec_Calo_ClusterMatch");
    algo76->reads("Rec_Calo_EcalChi2");
    algo76->reads("Rec_Calo_EcalE");
    algo76->reads("Rec_Calo_ClusChi2");
    algo76->reads("Rec_Calo_EcalPIDe");
    algo76->reads("Rec_Calo_EcalPIDmu");
    algo76->reads("Rec_ProtoP_Charged");
    algo76->reads("Raw_Prs_Digits");
    algo76->reads("Raw_Spd_Digits");
    algo76->reads("Rec_Calo_BremMatch");
    algo76->reads("Rec_Calo_PhotonID");
    algo76->reads("Rec_Calo_PhotonFromMergedID");
    algo76->reads("Rec_Calo_MergedID");
    algo76->reads("Raw_Hcal_Digits");
    algos.push_back(algo76);
    AlgoBase* algo77 = new ToyAlgo("ANNGPIDUpstreamGhost",0,0);
    algo77->reads("Rec_ProtoP_Charged");
    algos.push_back(algo77);
    AlgoBase* algo78 = new ToyAlgo("PhotonMon",0,0);
    algo78->reads("Rec_Calo_Photons");
    algo78->reads("Rec_Calo_EcalClusters");
    algos.push_back(algo78);
    AlgoBase* algo79 = new ToyAlgo("ProtoElectronMon",0,0);
    algo79->reads("Rec_ProtoP_Charged");
    algos.push_back(algo79);
    AlgoBase* algo80 = new ToyAlgo("PatVeloTT",0,0);
    algo80->reads("Rec_Track_Velo");
    algo80->reads("Rec_Track_Forward");
    algo80->reads("Rec_Track_Match");
    algo80->produces("Rec_Track_VeloTT");
    algos.push_back(algo80);
    AlgoBase* algo82 = new ToyAlgo("EcalClusterMon",0,0);
    algo82->reads("Rec_Calo_EcalClusters");
    algos.push_back(algo82);
    AlgoBase* algo83 = new ToyAlgo("SpdL0Bit",0,0);
    algo83->reads("DAQ_Status");
    algo83->produces("Trig_L0_SpdRaw");
    algos.push_back(algo83);
    AlgoBase* algo84 = new ToyAlgo("RiPIDMonLong2To10",0,0);
    algo84->reads("Rec_Rich_PIDs");
    algos.push_back(algo84);
    AlgoBase* algo86 = new ToyAlgo("EcalE",0,0);
    algo86->reads("Rec_Calo_InAccEcal");
    algo86->reads("Rec_Track_Best");
    algo86->reads("Raw_Ecal_Digits");
    algo86->produces("Rec_Calo_EcalE");
    algos.push_back(algo86);
    AlgoBase* algo89 = new ToyAlgo("PackTwoProngVertex",0,0);
    algo89->reads("Rec_Vertex_V0");
    algo89->produces("pRec_Vertex_V0");
    algos.push_back(algo89);
    AlgoBase* algo90 = new ToyAlgo("MuonPIDMonitorLong",0,0);
    algo90->reads("Rec_Track_Best");
    algo90->reads("Rec_Muon_MuonPID");
    algo90->reads("Rec_Track_Muon");
    algos.push_back(algo90);
    AlgoBase* algo91 = new ToyAlgo("PatVeloSpaceTracking",0,0);
    algo91->reads("Rec_Track_RZVelo");
    algo91->produces("Rec_Track_Velo");
    algos.push_back(algo91);
    AlgoBase* algo93 = new ToyAlgo("PrsSpdFillRawBuffer",0,0);
    algo93->reads("Raw_Prs_Adcs");
    algo93->reads("Trig_L0_PrsRaw");
    algo93->reads("Trig_L0_SpdRaw");
    algos.push_back(algo93);
    AlgoBase* algo94 = new ToyAlgo("ANNGPIDDownstreamProton",0,0);
    algo94->reads("Rec_ProtoP_Charged");
    algos.push_back(algo94);
    AlgoBase* algo95 = new ToyAlgo("ITTrackMonitor",0,0);
    algo95->reads("Rec_Track_Best");
    algo95->reads("Raw_IT_Clusters");
    algos.push_back(algo95);
    AlgoBase* algo96 = new ToyAlgo("HltCompositionMonitor",0,0);
    algo96->reads("Hlt_DecReports");
    algos.push_back(algo96);
    AlgoBase* algo99 = new ToyAlgo("CreateOfflineTracks",0,0);
    algo99->reads("Rec_Status");
    algos.push_back(algo99);
    AlgoBase* algo102 = new ToyAlgo("RichRawDataSizeL0",0,0);
    algos.push_back(algo102);
    AlgoBase* algo104 = new ToyAlgo("SpdFromRaw",0,0);
    algo104->reads("DAQ_Status");
    algo104->produces("Raw_Spd");
    algo104->produces("Raw_Spd_Digits");
    algos.push_back(algo104);
    AlgoBase* algo105 = new ToyAlgo("RiPIDMonLong2To100",0,0);
    algo105->reads("Rec_Rich_PIDs");
    algos.push_back(algo105);
    AlgoBase* algo106 = new ToyAlgo("TrackVeloOverlapMonitor",0,0);
    algo106->reads("Rec_Track_Best");
    algos.push_back(algo106);
    AlgoBase* algo107 = new ToyAlgo("ANNGPIDLongElectron",0,0);
    algo107->reads("Rec_ProtoP_Charged");
    algos.push_back(algo107);
    AlgoBase* algo110 = new ToyAlgo("MergedPi0Rec",0,0);
    algo110->reads("Rec_Calo_EcalClusters");
    algo110->reads("Raw_Spd_Digits");
    algo110->reads("Raw_Prs_Digits");
    algo110->produces("Rec_Calo_EcalSplitClusters");
    algo110->produces("Rec_Calo_MergedPi0s");
    algo110->produces("Rec_Calo_SplitPhotons");
    algos.push_back(algo110);
    AlgoBase* algo111 = new ToyAlgo("FilterBeam2",0,0);
    algos.push_back(algo111);
    AlgoBase* algo113 = new ToyAlgo("EcalDigitMon",0,0);
    algo113->reads("Raw_Ecal_Digits");
    algos.push_back(algo113);
    AlgoBase* algo115 = new ToyAlgo("HcalZSup",0,0);
    algo115->reads("DAQ_Status");
    algo115->produces("Raw_Hcal_Digits");
    algos.push_back(algo115);
    AlgoBase* algo116 = new ToyAlgo("ChargedProtoPAddRich",0,0);
    algo116->reads("Rec_Rich_PIDs");
    algo116->reads("Rec_ProtoP_Charged");
    algos.push_back(algo116);
    AlgoBase* algo124 = new ToyAlgo("HcalTrigFromRaw",0,0);
    algo124->reads("DAQ_Status");
    algo124->produces("Trig_L0_HcalRaw");
    algos.push_back(algo124);
    AlgoBase* algo128 = new ToyAlgo("ANNGPIDLongProton",0,0);
    algo128->reads("Rec_ProtoP_Charged");
    algos.push_back(algo128);
    AlgoBase* algo129 = new ToyAlgo("ElectronMon",0,0);
    algo129->reads("Rec_Calo_Electrons");
    algo129->reads("Rec_Calo_EcalClusters");
    algos.push_back(algo129);
    AlgoBase* algo130 = new ToyAlgo("BremChi22ID",0,0);
    algo130->reads("Rec_Calo_BremMatch");
    algo130->reads("Rec_Track_Best");
    algo130->produces("Rec_Calo_BremChi2");
    algos.push_back(algo130);
    AlgoBase* algo131 = new ToyAlgo("ChargedProtoPAddPrs",0,0);
    algo131->reads("Rec_Calo_InAccPrs");
    algo131->reads("Rec_Calo_PrsE");
    algo131->reads("Rec_Calo_PrsPIDe");
    algo131->reads("Rec_ProtoP_Charged");
    algos.push_back(algo131);
    AlgoBase* algo133 = new ToyAlgo("OfflineENNFinderR2GasLeft",0,0);
    algo133->reads("Rec_Rich_ENN_Offline_RingsAll");
    algos.push_back(algo133);
    AlgoBase* algo135 = new ToyAlgo("ANNGPIDUpstreamPion",0,0);
    algo135->reads("Rec_ProtoP_Charged");
    algos.push_back(algo135);
    AlgoBase* algo136 = new ToyAlgo("HltErrorFilter",0,0);
    algo136->reads("Hlt_DecReports");
    algos.push_back(algo136);
    AlgoBase* algo138 = new ToyAlgo("OfflineENNFinderR1GasTop",0,0);
    algo138->produces("Rec_Rich_ENN");
    algo138->produces("Rec_Rich_ENN_Offline");
    algo138->produces("Rec_Rich_ENN_Offline_RingsAll");
    algos.push_back(algo138);
    AlgoBase* algo140 = new ToyAlgo("VeloIPResolutionMonitor",0,0);
    algo140->reads("Rec_Vertex_Primary");
    algos.push_back(algo140);
    AlgoBase* algo141 = new ToyAlgo("ClusterMatch",0,0);
    algo141->reads("Rec_Calo_InAccEcal");
    algo141->reads("Rec_Track_Best");
    algo141->reads("Rec_Calo_EcalClusters");
    algo141->produces("Rec_Calo_ClusterMatch");
    algos.push_back(algo141);
    AlgoBase* algo144 = new ToyAlgo("TsaSeed",0,0);
    algo144->reads("Raw_IT_LiteClusters");
    algo144->reads("Rec_Status");
    algo144->produces("Rec_Tsa");
    algo144->produces("Rec_Tsa_SeedTracks");
    algo144->produces("Rec_Tsa_SeedHits");
    algo144->produces("Rec_Tsa_SeedStubs");
    algos.push_back(algo144);
    AlgoBase* algo146 = new ToyAlgo("CreateOfflinePhotons",0,0);
    algo146->reads("Rec_Status");
    algos.push_back(algo146);
    AlgoBase* algo147 = new ToyAlgo("CheckProcOfflineStatus",0,0);
    algo147->reads("Rec_Status");
    algo147->produces("Rec_Rich");
    algo147->produces("Rec_Rich_RecoEvent");
    algo147->produces("Rec_Rich_RecoEvent_Offline");
    algo147->produces("Rec_Rich_RecoEvent_Offline_Status");
    algos.push_back(algo147);
    AlgoBase* algo149 = new ToyAlgo("PackRecVertex",0,0);
    algo149->reads("Rec_Vertex_Primary");
    algo149->produces("pRec_Vertex");
    algo149->produces("pRec_Vertex_Primary");
    algos.push_back(algo149);
    AlgoBase* algo151 = new ToyAlgo("PatDownstream",0,0);
    algo151->reads("Rec_Track_Seed");
    algo151->reads("Raw_TT_LiteClusters");
    algo151->reads("Rec_Track_Match");
    algo151->produces("Rec_Track_Downstream");
    algos.push_back(algo151);
    AlgoBase* algo153 = new ToyAlgo("SplitPhotonMon",0,0);
    algo153->reads("Rec_Calo_SplitPhotons");
    algos.push_back(algo153);
    AlgoBase* algo154 = new ToyAlgo("CaloEMuPIDMonSoft",0,0);
    algo154->reads("Rec_ProtoP_Charged");
    algos.push_back(algo154);
    AlgoBase* algo155 = new ToyAlgo("EcalChi22ID",0,0);
    algo155->reads("Rec_Calo_ElectronMatch");
    algo155->reads("Rec_Track_Best");
    algo155->produces("Rec_Calo_EcalChi2");
    algos.push_back(algo155);
    AlgoBase* algo156 = new ToyAlgo("InECAL",0,0);
    algo156->reads("Rec_Track_Best");
    algo156->produces("Rec_Calo_InAccEcal");
    algos.push_back(algo156);
    AlgoBase* algo157 = new ToyAlgo("MergedPi0Mon",0,0);
    algo157->reads("Rec_Calo_MergedPi0s");
    algos.push_back(algo157);
    AlgoBase* algo159 = new ToyAlgo("ChargedProtoPAddSpd",0,0);
    algo159->reads("Rec_Calo_InAccSpd");
    algo159->reads("Rec_Calo_SpdE");
    algo159->reads("Rec_ProtoP_Charged");
    algos.push_back(algo159);
    AlgoBase* algo161 = new ToyAlgo("PackPhotons",0,0);
    algo161->reads("Rec_Calo_Photons");
    algo161->produces("pRec_Calo");
    algo161->produces("pRec_Calo_Photons");
    algos.push_back(algo161);
    AlgoBase* algo162 = new ToyAlgo("EcalCovar",0,0);
    algo162->reads("Rec_Calo_EcalClusters");
    algos.push_back(algo162);
    AlgoBase* algo163 = new ToyAlgo("EcalPIDmu",0,0);
    algo163->reads("Rec_Calo_EcalE");
    algo163->produces("Rec_Calo_EcalPIDmu");
    algos.push_back(algo163);
    AlgoBase* algo164 = new ToyAlgo("VeloClusterMonitor",0,0);
    algo164->reads("Raw_Velo_Clusters");
    algos.push_back(algo164);
    AlgoBase* algo167 = new ToyAlgo("FitSeedForMatch",0,0);
    algo167->reads("Rec_Track_Seed");
    algo167->reads("Raw_IT_Clusters");
    algos.push_back(algo167);
    AlgoBase* algo168 = new ToyAlgo("BrunelBankKiller",0,0);
    algos.push_back(algo168);
    AlgoBase* algo169 = new ToyAlgo("CaloDigitFilter",0,0);
    algo169->reads("Raw_Ecal_Digits");
    algo169->reads("Raw_Spd_Digits");
    algo169->reads("Raw_Hcal_Digits");
    algo169->reads("Raw_Prs_Digits");
    algos.push_back(algo169);
    AlgoBase* algo170 = new ToyAlgo("PatVeloGeneralTracking",0,0);
    algo170->reads("Raw_Velo_LiteClusters");
    algo170->reads("Rec_Track_Velo");
    algos.push_back(algo170);
    AlgoBase* algo172 = new ToyAlgo("ANNGPIDDownstreamMuon",0,0);
    algo172->reads("Rec_ProtoP_Charged");
    algos.push_back(algo172);
    AlgoBase* algo174 = new ToyAlgo("MuonTrackAligMonitor",0,0);
    algo174->reads("Rec_Muon_MuonPID");
    algos.push_back(algo174);
    AlgoBase* algo179 = new ToyAlgo("CopyVelo",0,0);
    algo179->reads("Rec_Track_PreparedVelo");
    algo179->reads("Rec_Track_Best");
    algos.push_back(algo179);
    AlgoBase* algo180 = new ToyAlgo("CopyBest",0,0);
    algo180->reads("Rec_Track_AllBest");
    algo180->produces("Rec_Track_Best");
    algos.push_back(algo180);
    AlgoBase* algo184 = new ToyAlgo("SpdMon",0,0);
    algo184->reads("Raw_Spd_Digits");
    algos.push_back(algo184);
    AlgoBase* algo186 = new ToyAlgo("TrackAddNNGhostId",0,0);
    algo186->reads("Rec_Track_Best");
    algo186->reads("Raw_Velo_Clusters");
    algo186->reads("Raw_TT_Clusters");
    algos.push_back(algo186);
    AlgoBase* algo187 = new ToyAlgo("LumiDecodeBeamCrossing",0,0);
    algo187->produces("Hlt");
    algo187->produces("Hlt_LumiSummary");
    algos.push_back(algo187);
    AlgoBase* algo189 = new ToyAlgo("EcalPIDe",0,0);
    algo189->reads("Rec_Calo_EcalChi2");
    algo189->produces("Rec_Calo_EcalPIDe");
    algos.push_back(algo189);
    AlgoBase* algo190 = new ToyAlgo("FilterNoBeam",0,0);
    algos.push_back(algo190);
    AlgoBase* algo191 = new ToyAlgo("MuonTrackFitter",0,0);
    algo191->reads("Rec_Track_Muon");
    algos.push_back(algo191);
    AlgoBase* algo194 = new ToyAlgo("CreateTTClusters",0,0);
    algo194->produces("Raw_TT");
    algo194->produces("Raw_TT_Clusters");
    algo194->produces("Rec_TT");
    algo194->produces("Rec_TT_Summary");
    algos.push_back(algo194);
    AlgoBase* algo195 = new ToyAlgo("ANNGPIDLongGhost",0,0);
    algo195->reads("Rec_ProtoP_Charged");
    algos.push_back(algo195);
    AlgoBase* algo196 = new ToyAlgo("PhotonMatchMon",0,0);
    algo196->reads("Rec_Calo_ClusterMatch");
    algo196->reads("Rec_Calo_EcalClusters");
    algo196->reads("Rec_Calo_EcalSplitClusters");
    algos.push_back(algo196);
    AlgoBase* algo198 = new ToyAlgo("ChargedProtoPMoni",0,0);
    algo198->reads("Rec_Track_Best");
    algo198->reads("Rec_ProtoP_Charged");
    algos.push_back(algo198);
    AlgoBase* algo200 = new ToyAlgo("ElectronMatchMon",0,0);
    algo200->reads("Rec_Calo_ElectronMatch");
    algo200->reads("Rec_Calo_Electrons");
    algos.push_back(algo200);
    AlgoBase* algo201 = new ToyAlgo("TrackPrsMatchMonitor",0,0);
    algo201->reads("Raw_Prs_Digits");
    algo201->reads("Rec_Track_Best");
    algos.push_back(algo201);
    AlgoBase* algo203 = new ToyAlgo("FitBest",0,0);
    algo203->reads("Rec_Track_AllBest");
    algo203->reads("Raw_IT_Clusters");
    algo203->reads("Raw_TT_Clusters");
    algos.push_back(algo203);
    AlgoBase* algo204 = new ToyAlgo("FilterBeam1",0,0);
    algos.push_back(algo204);
    AlgoBase* algo206 = new ToyAlgo("TrackITOverlapMonitor",0,0);
    algo206->reads("Rec_Track_Best");
    algo206->reads("Raw_IT_LiteClusters");
    algos.push_back(algo206);
    AlgoBase* algo207 = new ToyAlgo("HcalPIDe",0,0);
    algo207->reads("Rec_Calo_HcalE");
    algo207->produces("Rec_Calo_HcalPIDe");
    algos.push_back(algo207);
    AlgoBase* algo210 = new ToyAlgo("FitVelo",0,0);
    algo210->reads("Rec_Track_PreparedVelo");
    algos.push_back(algo210);
    AlgoBase* algo211 = new ToyAlgo("RichOfflineGPIDTrSel",0,0);
    algo211->reads("Rec_Status");
    algo211->produces("Rec_Rich_RecoEvent_Offline_Tracks");
    algo211->produces("Rec_Rich_GlobalPID");
    algo211->produces("Rec_Rich_GlobalPID_Offline");
    algo211->produces("Rec_Rich_GlobalPID_Offline_Tracks");
    algos.push_back(algo211);
    AlgoBase* algo216 = new ToyAlgo("OTHitEfficiencyMonitor",0,0);
    algo216->reads("Rec_Track_Best");
    algos.push_back(algo216);
    AlgoBase* algo217 = new ToyAlgo("EcalEFlowMon",0,0);
    algo217->reads("Raw_Ecal_Digits");
    algos.push_back(algo217);
    AlgoBase* algo218 = new ToyAlgo("PackTracks",0,0);
    algo218->reads("Rec_Track_Best");
    algo218->produces("pRec");
    algo218->produces("pRec_Track");
    algo218->produces("pRec_Track_Best");
    algos.push_back(algo218);
    AlgoBase* algo219 = new ToyAlgo("ResolvedPi0Mon",0,0);
    algo219->reads("Rec_Calo_Photons");
    algo219->reads("Raw_Spd_Digits");
    algo219->reads("Raw_Prs_Digits");
    algos.push_back(algo219);
    AlgoBase* algo220 = new ToyAlgo("ANNGPIDUpstreamMuon",0,0);
    algo220->reads("Rec_ProtoP_Charged");
    algos.push_back(algo220);
    AlgoBase* algo221 = new ToyAlgo("TrackVertexMonitor",0,0);
    algo221->reads("Rec_Vertex_Primary");
    algo221->reads("Rec_Track_Best");
    algos.push_back(algo221);
    AlgoBase* algo223 = new ToyAlgo("RichOfflineGPIDDigSel",0,0);
    algo223->reads("Rec_Status");
    algos.push_back(algo223);
    AlgoBase* algo224 = new ToyAlgo("InBREM",0,0);
    algo224->reads("Rec_Track_Best");
    algo224->produces("Rec_Calo_InAccBrem");
    algos.push_back(algo224);
    AlgoBase* algo225 = new ToyAlgo("PhotonFromMergedID",0,0);
    algo225->reads("Rec_Calo_SplitPhotons");
    algo225->produces("Rec_Calo_PhotonFromMergedID");
    algos.push_back(algo225);
    AlgoBase* algo226 = new ToyAlgo("OfflineIsolatedENNRings",0,0);
    algo226->reads("Rec_Rich_ENN_Offline_RingsBest");
    algo226->produces("Rec_Rich_ENN_Offline_RingsIsolated");
    algos.push_back(algo226);
    AlgoBase* algo228 = new ToyAlgo("OfflineENNRingsSegAssoc",0,0);
    algo228->produces("Rec_Rich_RecoEvent_Offline_Segments");
    algos.push_back(algo228);
    AlgoBase* algo230 = new ToyAlgo("CaloEMuPIDMonHard",0,0);
    algo230->reads("Rec_ProtoP_Charged");
    algos.push_back(algo230);
    AlgoBase* algo231 = new ToyAlgo("OfflineBestENNRings",0,0);
    algo231->reads("Rec_Rich_ENN_Offline_RingsAll");
    algo231->produces("Rec_Rich_ENN_Offline_RingsBest");
    algos.push_back(algo231);
    AlgoBase* algo232 = new ToyAlgo("CreateOfflinePixels",0,0);
    algo232->reads("Rec_Status");
    algo232->produces("Rec_Rich_RecoEvent_Offline_Pixels");
    algos.push_back(algo232);
    AlgoBase* algo233 = new ToyAlgo("PatVeloRTracking",0,0);
    algo233->reads("Raw_Velo_LiteClusters");
    algo233->produces("Rec_Track");
    algo233->produces("Rec_Track_RZVelo");
    algos.push_back(algo233);
    AlgoBase* algo238 = new ToyAlgo("ANNGPIDDownstreamKaon",0,0);
    algo238->reads("Rec_ProtoP_Charged");
    algos.push_back(algo238);
    AlgoBase* algo240 = new ToyAlgo("CreateTTLiteClusters",0,0);
    algo240->produces("Raw_TT_LiteClusters");
    algos.push_back(algo240);
    AlgoBase* algo243 = new ToyAlgo("TsaSeedTrackCnv",0,0);
    algo243->reads("Rec_Tsa_SeedTracks");
    algo243->produces("Rec_Track_Seed");
    algos.push_back(algo243);
    AlgoBase* algo244 = new ToyAlgo("MuEffMonitor",0,0);
    algo244->reads("Raw_Muon_Coords");
    algo244->reads("Rec_Track_Best");
    algo244->reads("Rec_ProtoP_Charged");
    algos.push_back(algo244);
    AlgoBase* algo246 = new ToyAlgo("CreateITLiteClusters",0,0);
    algo246->produces("Raw_IT_LiteClusters");
    algos.push_back(algo246);
    AlgoBase* algo247 = new ToyAlgo("EcalCheckBanks",0,0);
    algos.push_back(algo247);
    AlgoBase* algo248 = new ToyAlgo("ANNGPIDUpstreamKaon",0,0);
    algo248->reads("Rec_ProtoP_Charged");
    algos.push_back(algo248);
    AlgoBase* algo249 = new ToyAlgo("TimeSpanAccounting",0,0);
    algos.push_back(algo249);
    AlgoBase* algo253 = new ToyAlgo("RemovePrsPackedBanks",0,0);
    algos.push_back(algo253);
    AlgoBase* algo254 = new ToyAlgo("TrackMuonMatchMonitor",0,0);
    algo254->reads("Rec_Track_Best");
    algo254->reads("Raw_Muon_Coords");
    algos.push_back(algo254);
    AlgoBase* algo255 = new ToyAlgo("VeloTrackMonitor",0,0);
    algo255->reads("Rec_Track_Best");
    algo255->reads("Raw_Velo_Clusters");
    algos.push_back(algo255);
    AlgoBase* algo256 = new ToyAlgo("FilterBeamCrossing",0,0);
    algos.push_back(algo256);
    AlgoBase* algo258 = new ToyAlgo("ANNGPIDLongPion",0,0);
    algo258->reads("Rec_ProtoP_Charged");
    algos.push_back(algo258);
    AlgoBase* algo259 = new ToyAlgo("HltDecReportsDecoder",0,0);
    algo259->produces("Hlt_DecReports");
    algos.push_back(algo259);
    AlgoBase* algo260 = new ToyAlgo("TrackEventCloneKiller",0,0);
    algo260->reads("Rec_Track_Forward");
    algo260->reads("Rec_Track_Seed");
    algo260->reads("Rec_Track_Match");
    algo260->reads("Rec_Track_Downstream");
    algo260->reads("Rec_Track_VeloTT");
    algo260->produces("Rec_Track_AllBest");
    algos.push_back(algo260);
    AlgoBase* algo261 = new ToyAlgo("SingleElectronRec",0,0);
    algo261->reads("Rec_Calo_EcalClusters");
    algo261->reads("Raw_Spd_Digits");
    algo261->reads("Raw_Prs_Digits");
    algo261->reads("Rec_Calo_ClusterMatch");
    algo261->produces("Rec_Calo_Electrons");
    algos.push_back(algo261);
    AlgoBase* algo262 = new ToyAlgo("OfflineENNFinderR2GasRight",0,0);
    algo262->reads("Rec_Rich_ENN_Offline_RingsAll");
    algos.push_back(algo262);
    AlgoBase* algo264 = new ToyAlgo("PackMuonTracks",0,0);
    algo264->reads("Rec_Track_Muon");
    algo264->produces("pRec_Track_Muon");
    algos.push_back(algo264);
    AlgoBase* algo266 = new ToyAlgo("HcalDigitMon",0,0);
    algo266->reads("Raw_Hcal_Digits");
    algos.push_back(algo266);
    AlgoBase* algo269 = new ToyAlgo("ITClusterMonitor",0,0);
    algo269->reads("Raw_IT_Clusters");
    algos.push_back(algo269);
    AlgoBase* algo271 = new ToyAlgo("TrackV0Monitor",0,0);
    algo271->reads("Rec_Vertex_V0");
    algos.push_back(algo271);
    AlgoBase* algo273 = new ToyAlgo("PrsCheckBanks",0,0);
    algos.push_back(algo273);
    AlgoBase* algo276 = new ToyAlgo("DstWriter",0,0);
    algo276->reads("Rec_Header");
    algo276->reads("Rec_Status");
    algo276->reads("Rec_Summary");
    algo276->reads("pRec");
    algo276->reads("pRec_Track");
    algo276->reads("pRec_Track_Best");
    algo276->reads("pRec_Rich");
    algo276->reads("pRec_Rich_PIDs");
    algo276->reads("pRec_Muon");
    algo276->reads("pRec_Muon_MuonPID");
    algo276->reads("pRec_Calo");
    algo276->reads("pRec_Calo_Electrons");
    algo276->reads("pRec_Calo_Photons");
    algo276->reads("pRec_Calo_MergedPi0s");
    algo276->reads("pRec_Calo_SplitPhotons");
    algo276->reads("pRec_ProtoP");
    algo276->reads("pRec_ProtoP_Charged");
    algo276->reads("pRec_ProtoP_Neutrals");
    algo276->reads("pRec_Vertex");
    algo276->reads("pRec_Vertex_Primary");
    algo276->reads("pRec_Vertex_Weights");
    algo276->reads("pRec_Vertex_V0");
    algo276->reads("pRec_Track_Muon");
    algos.push_back(algo276);
    AlgoBase* algo277 = new ToyAlgo("ANNGPIDLongKaon",0,0);
    algo277->reads("Rec_ProtoP_Charged");
    algos.push_back(algo277);
    AlgoBase* algo279 = new ToyAlgo("RemoveEcalPackedBanks",0,0);
    algos.push_back(algo279);
    AlgoBase* algo284 = new ToyAlgo("TrackAddLikelihood",0,0);
    algo284->reads("Rec_Track_Best");
    algos.push_back(algo284);
    AlgoBase* algo285 = new ToyAlgo("TimeSpanFilter",0,0);
    algos.push_back(algo285);
    AlgoBase* algo286 = new ToyAlgo("CaloEMuPIDMonUncut",0,0);
    algo286->reads("Rec_ProtoP_Charged");
    algos.push_back(algo286);
    AlgoBase* algo290 = new ToyAlgo("FlagTrackClones",0,0);
    algo290->reads("Rec_Track_Best");
    algo290->reads("Link_Rec_Track_BestClones");
    algos.push_back(algo290);
    AlgoBase* algo292 = new ToyAlgo("TrackEraseExtraInfo",0,0);
    algo292->reads("Rec_Track_Best");
    algos.push_back(algo292);
    AlgoBase* algo293 = new ToyAlgo("PrsDigitMon",0,0);
    algo293->reads("Raw_Prs_Digits");
    algos.push_back(algo293);
    AlgoBase* algo296 = new ToyAlgo("ANNGPIDUpstreamElectron",0,0);
    algo296->reads("Rec_ProtoP_Charged");
    algos.push_back(algo296);
    AlgoBase* algo297 = new ToyAlgo("ANNGPIDDownstreamPion",0,0);
    algo297->reads("Rec_ProtoP_Charged");
    algos.push_back(algo297);
    AlgoBase* algo299 = new ToyAlgo("CreateITClusters",0,0);
    algo299->produces("Raw_IT");
    algo299->produces("Raw_IT_Clusters");
    algo299->produces("Rec_IT");
    algo299->produces("Rec_IT_Summary");
    algos.push_back(algo299);
    AlgoBase* algo300 = new ToyAlgo("EcalTrigFromRaw",0,0);
    algo300->reads("DAQ_Status");
    algo300->produces("Trig_L0_EcalRaw");
    algos.push_back(algo300);
    AlgoBase* algo301 = new ToyAlgo("PackMergedPi0s",0,0);
    algo301->reads("Rec_Calo_MergedPi0s");
    algo301->produces("pRec_Calo_MergedPi0s");
    algos.push_back(algo301);
    AlgoBase* algo302 = new ToyAlgo("ANNGPIDDownstreamElectron",0,0);
    algo302->reads("Rec_ProtoP_Charged");
    algos.push_back(algo302);
    AlgoBase* algo303 = new ToyAlgo("PhysFilter",0,0);
    algos.push_back(algo303);
    AlgoBase* algo306 = new ToyAlgo("SpdDigitMon",0,0);
    algo306->reads("Raw_Spd_Digits");
    algos.push_back(algo306);
    AlgoBase* algo307 = new ToyAlgo("EcalShare",0,0);
    algo307->reads("Rec_Calo_EcalClusters");
    algos.push_back(algo307);
    AlgoBase* algo308 = new ToyAlgo("HcalCheckBanks",0,0);
    algos.push_back(algo308);
    AlgoBase* algo309 = new ToyAlgo("TrackPV2HalfAlignMonitor",0,0);
    algo309->reads("Rec_Track_Best");
    algos.push_back(algo309);
    AlgoBase* algo310 = new ToyAlgo("ChargedProtoPAddMuon",0,0);
    algo310->reads("Rec_Muon_MuonPID");
    algo310->reads("Rec_ProtoP_Charged");
    algos.push_back(algo310);
    AlgoBase* algo312 = new ToyAlgo("PrsE",0,0);
    algo312->reads("Rec_Calo_InAccPrs");
    algo312->reads("Rec_Track_Best");
    algo312->reads("Raw_Prs_Digits");
    algo312->produces("Rec_Calo_PrsE");
    algos.push_back(algo312);
    AlgoBase* algo313 = new ToyAlgo("ChargedProtoPAddBrem",0,0);
    algo313->reads("Rec_Calo_InAccBrem");
    algo313->reads("Rec_Calo_BremMatch");
    algo313->reads("Rec_Calo_BremChi2");
    algo313->reads("Rec_Calo_BremPIDe");
    algo313->reads("Rec_ProtoP_Charged");
    algos.push_back(algo313);
    AlgoBase* algo314 = new ToyAlgo("PackRichPIDs",0,0);
    algo314->reads("Rec_Rich_PIDs");
    algo314->produces("pRec_Rich");
    algo314->produces("pRec_Rich_PIDs");
    algos.push_back(algo314);
    AlgoBase* algo319 = new ToyAlgo("BremPIDe",0,0);
    algo319->reads("Rec_Calo_BremChi2");
    algo319->produces("Rec_Calo_BremPIDe");
    algos.push_back(algo319);
    AlgoBase* algo320 = new ToyAlgo("ANNGPIDUpstreamProton",0,0);
    algo320->reads("Rec_ProtoP_Charged");
    algos.push_back(algo320);
    AlgoBase* algo321 = new ToyAlgo("SinglePhotonRec",0,0);
    algo321->reads("Rec_Calo_EcalClusters");
    algo321->reads("Rec_Calo_ClusterMatch");
    algo321->reads("Raw_Prs_Digits");
    algo321->reads("Raw_Spd_Digits");
    algo321->produces("Rec_Calo_Photons");
    algos.push_back(algo321);
    AlgoBase* algo322 = new ToyAlgo("PackNeutralProtos",0,0);
    algo322->reads("Rec_ProtoP_Neutrals");
    algo322->produces("pRec_ProtoP_Neutrals");
    algos.push_back(algo322);
    AlgoBase* algo323 = new ToyAlgo("PhotonID",0,0);
    algo323->reads("Rec_Calo_Photons");
    algo323->reads("Raw_Prs_Digits");
    algo323->reads("Raw_Spd_Digits");
    algo323->reads("Rec_Calo_ElectronMatch");
    algo323->reads("Rec_Calo_BremMatch");
    algo323->reads("Raw_Hcal_Digits");
    algo323->reads("Rec_Calo_ClusterMatch");
    algo323->produces("Rec_Calo_PhotonID");
    algos.push_back(algo323);
    AlgoBase* algo326 = new ToyAlgo("TrackFitMatchMonitor",0,0);
    algo326->reads("Rec_Track_Best");
    algos.push_back(algo326);
    AlgoBase* algo328 = new ToyAlgo("EcalFillRawBuffer",0,0);
    algo328->reads("Raw_Ecal_Adcs");
    algo328->reads("Trig_L0_EcalRaw");
    algos.push_back(algo328);
    AlgoBase* algo329 = new ToyAlgo("RichDataSizeL0Filter",0,0);
    algo329->reads("Hlt_DecReports");
    algos.push_back(algo329);
    AlgoBase* algo332 = new ToyAlgo("PrsPIDe",0,0);
    algo332->reads("Rec_Calo_PrsE");
    algo332->produces("Rec_Calo_PrsPIDe");
    algos.push_back(algo332);
    AlgoBase* algo336 = new ToyAlgo("BremMatchMon",0,0);
    algo336->reads("Rec_Calo_BremMatch");
    algo336->reads("Rec_Calo_Photons");
    algos.push_back(algo336);
    AlgoBase* algo340 = new ToyAlgo("SpdE",0,0);
    algo340->reads("Rec_Calo_InAccSpd");
    algo340->reads("Rec_Track_Best");
    algo340->reads("Raw_Spd_Digits");
    algo340->produces("Rec_Calo_SpdE");
    algos.push_back(algo340);
    AlgoBase* algo341 = new ToyAlgo("ProcStatAbortMoni",0,0);
    algo341->reads("Rec_Status");
    algos.push_back(algo341);
    AlgoBase* algo342 = new ToyAlgo("TrackAlignMonitor",0,0);
    algo342->reads("Rec_Track_Best");
    algos.push_back(algo342);
    AlgoBase* algo343 = new ToyAlgo("BremMatch",0,0);
    algo343->reads("Rec_Calo_InAccBrem");
    algo343->reads("Rec_Track_Best");
    algo343->reads("Rec_Calo_Photons");
    algo343->produces("Rec_Calo_BremMatch");
    algos.push_back(algo343);
    AlgoBase* algo345 = new ToyAlgo("ANNGPIDDownstreamGhost",0,0);
    algo345->reads("Rec_ProtoP_Charged");
    algos.push_back(algo345);
    AlgoBase* algo346 = new ToyAlgo("ClusChi22ID",0,0);
    algo346->reads("Rec_Calo_ClusterMatch");
    algo346->reads("Rec_Track_Best");
    algo346->produces("Rec_Calo_ClusChi2");
    algos.push_back(algo346);
    AlgoBase* algo349 = new ToyAlgo("FindTrackClones",0,0);
    algo349->reads("Rec_Track_Best");
    algo349->produces("Link");
    algo349->produces("Link_Rec");
    algo349->produces("Link_Rec_Track");
    algo349->produces("Link_Rec_Track_BestClones");
    algos.push_back(algo349);
    AlgoBase* algo351 = new ToyAlgo("TrackSpdMatchMonitor",0,0);
    algo351->reads("Raw_Spd_Digits");
    algo351->reads("Rec_Track_Best");
    algos.push_back(algo351);
    AlgoBase* algo353 = new ToyAlgo("OfflineENNFinderR1GasBottom",0,0);
    algo353->reads("Rec_Rich_ENN_Offline_RingsAll");
    algos.push_back(algo353);
    AlgoBase* algo355 = new ToyAlgo("DecodeVeloClusters",0,0);
    algo355->reads("Rec_Status");
    algo355->produces("Raw_Velo");
    algo355->produces("Raw_Velo_LiteClusters");
    algo355->produces("Raw_Velo_Clusters");
    algos.push_back(algo355);
    AlgoBase* algo356 = new ToyAlgo("DecodeRawRichOffline",0,0);
    algos.push_back(algo356);
    AlgoBase* algo357 = new ToyAlgo("RemoveHcalPackedBanks",0,0);
    algos.push_back(algo357);
    AlgoBase* algo358 = new ToyAlgo("PackElectrons",0,0);
    algo358->reads("Rec_Calo_Electrons");
    algo358->produces("pRec_Calo_Electrons");
    algos.push_back(algo358);
    AlgoBase* algo361 = new ToyAlgo("InPRS",0,0);
    algo361->reads("Rec_Track_Best");
    algo361->produces("Rec_Calo_InAccPrs");
    algos.push_back(algo361);
    AlgoBase* algo362 = new ToyAlgo("InHCAL",0,0);
    algo362->reads("Rec_Track_Best");
    algo362->produces("Rec_Calo_InAccHcal");
    algos.push_back(algo362);
    AlgoBase* algo364 = new ToyAlgo("PackSplitPhotons",0,0);
    algo364->reads("Rec_Calo_SplitPhotons");
    algo364->produces("pRec_Calo_SplitPhotons");
    algos.push_back(algo364);
    AlgoBase* input = new ToyAlgo("input",0,0);
    input->produces("Raw_Prs_Adcs");
    input->produces("DAQ_Status");
    input->produces("Rec_Vertex_Primary");
    input->produces("Rec_Vertex_Weights");
    algos.push_back(input);
return algos;
};
#endif
